{"noir_version":"1.0.0-beta.0+7311d8ca566c3b3e0744389fc5e4163741927767","hash":17576831741025677807,"abi":{"parameters":[{"name":"leaf","type":{"kind":"field"},"visibility":"private"},{"name":"index","type":{"kind":"field"},"visibility":"private"},{"name":"hash_path","type":{"kind":"array","length":31,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"5ZzRahtBDEX/xc9+GGlmd2byK6UUJ3GLwdjBcQol5N/rLd4kOEaieAWzui8hG0+UaFd3dRkx53XxuL5/+fVjs/u5f17cfXtdbPcPq+NmvztdvS7Cvx89P612w9XzcXU4Lu66EpaL9e5xcdfH/m25+LnZrk/fl7fl16VUzku7mN6Xxvz2fbkgw9hsGDsaxk6GsTvD2L1h7GwYuxjGrpbaMRWmpTLJUppkqU2yFCdZqpMs5UmW+iRLgZKlQtlSoWzaOy0VypYKZUuFsqVC2VKhbKlQtlQoWyo0Wio0Wio0mtrbWxVaAp+Xli5+Dv51KaXcnddSRx+L+dpiDkTnxRxikRdHjv15ceRcPy8eckwucowpjTnG2l/m2AHk2APkmAH0WACeY201x8hjN+CYy8W/nYL/8kvkv/wSA+Tow7rIOSYAPQJYl9SsdZHbAYAbSQBuJDXrRqbLsfNhXeQcfVgXUY8dgHXpmrUuYjvoEkD5AbiRDmAjpfNhXeQcfVgXWY8A1qVv1rqI7aAHcCM9gBvpATZS+gSQow/rIusRwLr0zVoXuR0AuJEewI1kgI2UDDADyj6si6jHDGBdcpplO8gAbiQDuJEMsJGSAWZA2Yd1EfVYAKxLada6iO2gALiRAuBGSgLIEWAGVHxYF1mPANalNGtd5HYA4EYqgBupABspFWAGVAHOAdUE8BybtS5iO6gAbqQCuJEKsJFSAWZAFAAOAlEAMC8UmnUvYkegAOBIKCSECgTYTqEAMAqiAHAeiAKAh6Ewz/PJRAi+hBB8CQHsqhABTIToZlTaLDSJYGJonseUiRB8CSH4EkLYXGGAwRAxwOkgYgQTw/M8rUw3AyJnUYEIvoQRNlcYYD5EDHBIiBjBxMR5HlqmiOBLIoIvccKuVZJMCEkCnBUiBHwttcuvVboCgi9pF0o7YQU6QdgqSSJMiJxAbGVNIlBsqV2MrdwVnKBplQpE8CVOSLZKkggTIicsW1mTCDBbapdmK3cFJ4RapQIRfIkToK2SJMKEyAnSVtEkgolpF2qrdAUEX9IuqXbCCnTCtVWSRJgQOSHbKppMCE9ynueayQmvVqlABF/iBG+rJIkwIXICuJU1iUC4pXYRt3JXcIKtVSowIVQgwuYKAuaWnHBuFU0imJh2SbdyV3BCr5UrsF187YQV6AR2qySJMCFygrtVNIlgYtoF3ipdAcGXtEuxnbICETZXEKC35IR6K2sSAXtL7XJv5a7ghGWrVCCCL3GCvlWSRJgQOYHfKpoEMDHcLv1W7ArsBGgrViC3C7SdsgIBNlc4JIQkAc4QMQL9ltul3ypdAcCXcLtA2wkr0An9VkkSYELETui3siYR6LfcLv1W7gpOgLZKBSL4Eif0WyVJgAkRO6HfyppEoN9yu/RbuSs4AdoqFYjgS5zQb5UkASZE7IR+q2gSwcS0S79VugKCL2kXaDthBTqh3ypJIkyInNBvFU0mhCc5z7PN7ARoq1Qggi9xQr9VkkSYEDmh38qaRKDfcrv0W7krOAHaKhWYECoQYXMFgX7LTui3iiYRTEy79FuhK5wu7g+b7Xbz68d2/7A6bva75+FXw/Dl+vycPu4Zhdh9hEtX/nYO4y3LxJ+Xfh+4fLbh+9vDxziGT/UyfJ4g/PjAcx8vwxfb8PX28KWO4Wu+CH99kDhdeLo5fOHxhVXSZeVcn7T9Z/juXcv9Zfh4e/j8/qr4enPShOHrhazeTle/V4fN6n67Hl4Uw4cvu4fxvXG6PP55Gj8Z3yxPh/3D+vHlsB7eMZ9eL0ORcF5GPoU9hf4L","file_map":{"24":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"27":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"37":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let index_bits: [u1; N] = index.to_le_bits();\n    let mut current = leaf;\n    for i in 0..N {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"68":{"source":"use dep::std;\n\n/*\n+------------------------------+------------------------+--------------+----------------------+\n| Package                      | Language               | ACIR Opcodes | Backend Circuit Size |\n+------------------------------+------------------------+--------------+----------------------+\n| compute_merkle_root_depth_32 | PLONKCSat { width: 3 } | 310          | 30482                |\n+------------------------------+------------------------+--------------+----------------------+\n*/\n\nfn main(leaf: Field, index: Field, hash_path: [Field; 31]) -> pub Field {\n    std::merkle::compute_merkle_root(leaf, index, hash_path)\n}\n","path":"/home/di/noir-benchmarks/primitives/compute_merkle_root_depth_32/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint","directive_to_radix"]}